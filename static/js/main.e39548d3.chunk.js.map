{"version":3,"sources":["components/MatchCard/MatchCard.js","components/Wrapper/Wrapper.js","components/Title/Title.js","App.js","index.js"],"names":["MatchCard","props","react_default","a","createElement","onClick","setClicked","id","className","alt","name","src","image","Wrapper","children","Title","correctGuesses","bestScore","clickMessage","App","state","matches","_this","clickedMatch","filter","match","clicked","console","log","i","length","setState","sort","b","Math","random","_this2","this","components_Wrapper_Wrapper","components_Title_Title","map","components_MatchCard_MatchCard","key","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"s+BAYeA,SATG,SAAAC,GAAK,OAEpBC,EAAAC,EAAAC,cAAA,OAAKC,QAAS,kBAAMJ,EAAMK,WAAWL,EAAMM,KAAKC,UAAU,iBACzDN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACdN,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,YCFvBC,SAFC,SAAAZ,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,WAAWP,EAAMa,YCE1CC,SAFD,SAAAd,GAAK,OAAIC,EAAAC,EAAAC,cAAA,MAAII,UAAU,SAASP,EAAMa,mBCIhDE,SAAiB,GACjBC,EAAY,EACZC,EAAe,mGAyHJC,6MApHXC,MAAQ,CACJC,UACAL,iBACAC,YACAC,kBAGJZ,WAAa,SAAAC,GAGT,IAAMc,EAAUC,EAAKF,MAAMC,QAGrBE,EAAeF,EAAQG,OAAO,SAAAC,GAAK,OAAIA,EAAMlB,KAAOA,IAI1D,GAAIgB,EAAa,GAAGG,QAAQ,CAExBC,QAAQC,IAAK,oBAAsBZ,GACnCW,QAAQC,IAAK,eAAiBX,GAE9BD,EAAiB,EACjBE,EAAe,mCAEf,IAAK,IAAIW,EAAI,EAAIA,EAAIR,EAAQS,OAASD,IAClCR,EAAQQ,GAAGH,SAAU,EAGzBJ,EAAKS,SAAS,CAACb,iBACfI,EAAKS,SAAS,CAAEf,mBAChBM,EAAKS,SAAS,CAACV,iBAGZ,GAAIL,EAAiB,GAGxBO,EAAa,GAAGG,SAAU,EAK1BR,EAAe,0BAFfF,EAIqBC,IACjBA,EAAYD,EACZM,EAAKS,SAAS,CAAEd,eAIpBI,EAAQW,KAAK,SAAS7B,EAAG8B,GAAG,MAAO,GAAMC,KAAKC,WAG9Cb,EAAKS,SAAS,CAAEV,YAChBC,EAAKS,SAAS,CAACf,mBACfM,EAAKS,SAAS,CAACb,qBACZ,CAGHK,EAAa,GAAGG,SAAU,EAG1BV,EAAiB,EAGjBE,EAAe,+BACfD,EAAY,GACZK,EAAKS,SAAS,CAAEd,cAEhB,IAAK,IAAIY,EAAI,EAAIA,EAAIR,EAAQS,OAASD,IAClCR,EAAQQ,GAAGH,SAAU,EAIzBL,EAAQW,KAAK,SAAS7B,EAAG8B,GAAG,MAAO,GAAMC,KAAKC,WAG9Cb,EAAKS,SAAS,CAAEV,YAChBC,EAAKS,SAAS,CAACf,mBACfM,EAAKS,SAAS,CAACb,2FAKd,IAAAkB,EAAAC,KACL,OACInC,EAAAC,EAAAC,cAACkC,EAAD,KACIpC,EAAAC,EAAAC,cAACmC,EAAD,6BAEArC,EAAAC,EAAAC,cAAA,MAAII,UAAU,gBACT6B,KAAKjB,MAAMF,cAGhBhB,EAAAC,EAAAC,cAAA,MAAII,UAAU,4BAAd,oBACsB6B,KAAKjB,MAAMJ,eAC7Bd,EAAAC,EAAAC,cAAA,WAFJ,eAGiBiC,KAAKjB,MAAMH,WAE5Bf,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACfN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACd6B,KAAKjB,MAAMC,QAAQmB,IAAI,SAAAf,GAAK,OACzBvB,EAAAC,EAAAC,cAACqC,EAAD,CACInC,WAAY8B,EAAK9B,WACjBC,GAAIkB,EAAMlB,GACVmC,IAAKjB,EAAMlB,GACXK,MAAOa,EAAMb,oBA5GnB+B,aCNlBC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.e39548d3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./MatchCard.css\";\n\nconst MatchCard = props => (\n\n\t\t\t<div onClick={() => props.setClicked(props.id)} className=\"card col-md-3\">\n\t\t\t\t<div className=\"img-container\">\n\t\t\t\t\t<img alt={props.name} src={props.image} />\n\t\t\t\t</div>\n\t\t\t</div>\n);\n\nexport default MatchCard;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\n\nexport default Title;\n","import React, { Component } from \"react\";\nimport MatchCard from \"./components/MatchCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport matches from \"./matchcards.json\";\nimport \"./App.css\";\n\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage = \"Click on Seinfeld characters to gain points, if you click on the same character twice, you lose!\";\n\nclass App extends Component {\n\n    // Setting this.state.matches to the matches json array\n    state = {\n        matches,\n        correctGuesses,\n        bestScore,\n        clickMessage\n    };\n\n    setClicked = id => {\n\n        // Make a copy of the state matches array to work with\n        const matches = this.state.matches;\n\n        // Filter for the clicked match\n        const clickedMatch = matches.filter(match => match.id === id);\n\n        // If the matched image's clicked value is already true,\n        // do the game over actions\n        if (clickedMatch[0].clicked){\n\n            console.log (\"Correct Guesses: \" + correctGuesses);\n            console.log (\"Best Score: \" + bestScore);\n\n            correctGuesses = 0;\n            clickMessage = \"You already clicked on this one!\"\n\n            for (let i = 0 ; i < matches.length ; i++){\n                matches[i].clicked = false;\n            }\n\n            this.setState({clickMessage});\n            this.setState({ correctGuesses });\n            this.setState({matches});\n\n        // Otherwise, if clicked = false, and the user hasn't finished\n        } else if (correctGuesses < 11) {\n\n            // Set its value to true\n            clickedMatch[0].clicked = true;\n\n            // increment the appropriate counter\n            correctGuesses++;\n\n            clickMessage = \"Good Job! Keep Going!\";\n\n            if (correctGuesses > bestScore){\n                bestScore = correctGuesses;\n                this.setState({ bestScore });\n            }\n\n            // Shuffle the array to be rendered in a random order\n            matches.sort(function(a, b){return 0.5 - Math.random()});\n\n            // Set this.state.matches equal to the new matches array\n            this.setState({ matches });\n            this.setState({correctGuesses});\n            this.setState({clickMessage});\n        } else {\n\n            // Set its value to true\n            clickedMatch[0].clicked = true;\n\n            // restart the guess counter\n            correctGuesses = 0;\n\n            // Egg on the user to play again\n            clickMessage = \"Great Job, You got them all!\";\n            bestScore = 12;\n            this.setState({ bestScore });\n\n            for (let i = 0 ; i < matches.length ; i++){\n                matches[i].clicked = false;\n            }\n\n            // Shuffle the array to be rendered in a random order\n            matches.sort(function(a, b){return 0.5 - Math.random()});\n\n            // Set this.state.matches equal to the new matches array\n            this.setState({ matches });\n            this.setState({correctGuesses});\n            this.setState({clickMessage});\n\n        }\n    };\n\n    render() {\n        return (\n            <Wrapper>\n                <Title>Seinfeld Clicky Game</Title>\n\n                <h3 className=\"scoreSummary\">\n                    {this.state.clickMessage}\n                </h3>\n\n                <h3 className=\"scoreSummary card-header\">\n                    Correct Guesses: {this.state.correctGuesses}\n                    <br />\n                    Best Score: {this.state.bestScore}\n                </h3>\n                <div className=\"container\">\n                <div className=\"row\">\n                {this.state.matches.map(match => (\n                    <MatchCard\n                        setClicked={this.setClicked}\n                        id={match.id}\n                        key={match.id}\n                        image={match.image}\n                    />\n                ))}\n                </div>\n                </div>\n\n            </Wrapper>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}